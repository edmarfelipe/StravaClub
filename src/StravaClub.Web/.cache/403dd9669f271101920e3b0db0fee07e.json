{"dependencies":[],"generated":{"js":"const CACHE = 'stava-club-v1';\r\n\r\nconst PRECACHE_URLS = [\r\n\t'/',\r\n\t'/index.css',\r\n\t'/index.js',\r\n\t'/fonts/OpenSans-Regular.woff2',\r\n\t'/fonts/OpenSans-Regular.woff',\r\n\t'/fonts/OpenSans-Light.woff2',\r\n\t'/fonts/OpenSans-Light.woff2'\r\n];\r\n\r\nself.addEventListener('install', evt => {\r\n\tevt.waitUntil(precache());\r\n});\r\n\r\nself.addEventListener('fetch', evt => {\r\n\tevt.respondWith(fromCache(evt.request));\r\n\tevt.waitUntil(update(evt.request));\r\n});\r\n\r\nfunction precache() {\r\n\treturn caches.open(CACHE).then(function (cache) {\r\n\t\treturn cache.addAll(PRECACHE_URLS);\r\n\t});\r\n}\r\n\r\nfunction fromCache(request) {\r\n\treturn caches.open(CACHE).then(function (cache) {\r\n\t\treturn cache.match(request).then(function (matching) {\r\n\t\t\treturn matching || Promise.reject('no-match');\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction update(request) {\r\n\treturn caches.open(CACHE).then(function (cache) {\r\n\t\treturn fetch(request).then(function (response) {\r\n\t\t\treturn cache.put(request, response);\r\n\t\t});\r\n\t});\r\n}","map":{"mappings":[{"source":"service-worker.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"service-worker.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"service-worker.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"service-worker.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"service-worker.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"service-worker.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"service-worker.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"service-worker.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"service-worker.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"service-worker.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"service-worker.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"service-worker.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"service-worker.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"service-worker.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"service-worker.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"service-worker.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"service-worker.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"service-worker.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"service-worker.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"service-worker.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"service-worker.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"service-worker.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"service-worker.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"service-worker.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"service-worker.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"service-worker.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"service-worker.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"service-worker.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"service-worker.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"service-worker.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"service-worker.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"service-worker.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"service-worker.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"service-worker.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"service-worker.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"service-worker.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"service-worker.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"service-worker.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"service-worker.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"service-worker.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"service-worker.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"service-worker.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"service-worker.js":"const CACHE = 'stava-club-v1';\r\n\r\nconst PRECACHE_URLS = [\r\n\t'/',\r\n\t'/index.css',\r\n\t'/index.js',\r\n\t'/fonts/OpenSans-Regular.woff2',\r\n\t'/fonts/OpenSans-Regular.woff',\r\n\t'/fonts/OpenSans-Light.woff2',\r\n\t'/fonts/OpenSans-Light.woff2'\r\n];\r\n\r\nself.addEventListener('install', evt => {\r\n\tevt.waitUntil(precache());\r\n});\r\n\r\nself.addEventListener('fetch', evt => {\r\n\tevt.respondWith(fromCache(evt.request));\r\n\tevt.waitUntil(update(evt.request));\r\n});\r\n\r\nfunction precache() {\r\n\treturn caches.open(CACHE).then(function (cache) {\r\n\t\treturn cache.addAll(PRECACHE_URLS);\r\n\t});\r\n}\r\n\r\nfunction fromCache(request) {\r\n\treturn caches.open(CACHE).then(function (cache) {\r\n\t\treturn cache.match(request).then(function (matching) {\r\n\t\t\treturn matching || Promise.reject('no-match');\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction update(request) {\r\n\treturn caches.open(CACHE).then(function (cache) {\r\n\t\treturn fetch(request).then(function (response) {\r\n\t\t\treturn cache.put(request, response);\r\n\t\t});\r\n\t});\r\n}"},"lineCount":42}},"hash":"d449fdf6629f04559bf412c066fed73f","cacheData":{"env":{}}}